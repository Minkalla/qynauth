name: QynAuth CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10' # Match version from .devcontainer.json
          cache: 'poetry' # Cache Poetry virtual environments

      - name: Install Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry

      - name: Install Python dependencies
        working-directory: src/python_app # Run poetry commands from the python_app directory
        run: poetry install --no-root # --no-root because Poetry config is at root of this subproject

      - name: Build Rust project
        working-directory: src/rust_lib # Navigate to the Rust project directory
        run: cargo build --release # Build in release mode for efficiency in CI

      - name: Run Python tests
        working-directory: src/python_app
        run: poetry run pytest

      - name: Run Python linting and formatting checks
        working-directory: src/python_app
        run: |
          poetry run black --check .
          poetry run flake8 .
          poetry run isort --check-only .

      - name: Run Python dependency audit
        working-directory: src/python_app
        run: |
          # Install pip-audit if not present
          python -m pip install pip-audit
          # Export dependencies and run audit
          poetry export -f requirements.txt --output requirements.txt --without-hashes --dev && pip-audit -r requirements.txt || true # '|| true' allows the workflow to pass if audit finds warnings, but fails on critical issues. Adjust level as needed.
        continue-on-error: true # Allow subsequent steps to run even if audit finds issues. For production, this might be 'false'.
