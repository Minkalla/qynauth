    name: QynAuth CI

    on:
      push:
        branches:
          - main
      pull_request:
        branches:
          - main

    jobs:
      build-and-test:
        runs-on: ubuntu-latest

        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Setup Python
            uses: actions/setup-python@v5
            with:
              python-version: '3.10' # Match version from .devcontainer.json
              cache: 'poetry' # Cache Poetry virtual environments

          - name: Install Poetry
            run: | # This block explicitly installs Poetry globally via pipx
              python -m pip install --upgrade pip
              python -m pip install pipx
              python -m pipx ensurepath
              pipx install poetry # Installs poetry into pipx's path
              poetry config virtualenvs.in-project true # Configure Poetry to create virtualenvs in .venv
            working-directory: src/python_app # Run this from python_app context for config

          - name: Install Python dependencies
            working-directory: src/python_app # Run poetry commands from the python_app directory
            run: poetry install # --no-root is not needed here as poetry is globally installed and virtualenvs.in-project is set

          - name: Build Rust project
            working-directory: src/rust_lib # Navigate to the Rust project directory
            run: cargo build --release # Build in release mode for efficiency in CI

          - name: Run Python tests
            working-directory: src/python_app
            run: poetry run pytest

          - name: Run Python linting and formatting checks
            working-directory: src/python_app
            run: |
              poetry run black --check .
              poetry run flake8 .
              poetry run isort --check-only .

          - name: Run Python dependency audit
            working-directory: src/python_app
            run: |
              # Install pip-audit if not present
              python -m pip install pip-audit
              # Export dependencies and run audit
              poetry export -f requirements.txt --output requirements.txt --without-hashes --dev && pip-audit -r requirements.txt || true
            continue-on-error: true
    